// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/good-manager/pkg/db/ent/stockv1"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StockV1Update is the builder for updating StockV1 entities.
type StockV1Update struct {
	config
	hooks     []Hook
	mutation  *StockV1Mutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StockV1Update builder.
func (sv *StockV1Update) Where(ps ...predicate.StockV1) *StockV1Update {
	sv.mutation.Where(ps...)
	return sv
}

// SetCreatedAt sets the "created_at" field.
func (sv *StockV1Update) SetCreatedAt(u uint32) *StockV1Update {
	sv.mutation.ResetCreatedAt()
	sv.mutation.SetCreatedAt(u)
	return sv
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sv *StockV1Update) SetNillableCreatedAt(u *uint32) *StockV1Update {
	if u != nil {
		sv.SetCreatedAt(*u)
	}
	return sv
}

// AddCreatedAt adds u to the "created_at" field.
func (sv *StockV1Update) AddCreatedAt(u int32) *StockV1Update {
	sv.mutation.AddCreatedAt(u)
	return sv
}

// SetUpdatedAt sets the "updated_at" field.
func (sv *StockV1Update) SetUpdatedAt(u uint32) *StockV1Update {
	sv.mutation.ResetUpdatedAt()
	sv.mutation.SetUpdatedAt(u)
	return sv
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sv *StockV1Update) AddUpdatedAt(u int32) *StockV1Update {
	sv.mutation.AddUpdatedAt(u)
	return sv
}

// SetDeletedAt sets the "deleted_at" field.
func (sv *StockV1Update) SetDeletedAt(u uint32) *StockV1Update {
	sv.mutation.ResetDeletedAt()
	sv.mutation.SetDeletedAt(u)
	return sv
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sv *StockV1Update) SetNillableDeletedAt(u *uint32) *StockV1Update {
	if u != nil {
		sv.SetDeletedAt(*u)
	}
	return sv
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sv *StockV1Update) AddDeletedAt(u int32) *StockV1Update {
	sv.mutation.AddDeletedAt(u)
	return sv
}

// SetGoodID sets the "good_id" field.
func (sv *StockV1Update) SetGoodID(u uuid.UUID) *StockV1Update {
	sv.mutation.SetGoodID(u)
	return sv
}

// SetTotal sets the "total" field.
func (sv *StockV1Update) SetTotal(d decimal.Decimal) *StockV1Update {
	sv.mutation.SetTotal(d)
	return sv
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (sv *StockV1Update) SetNillableTotal(d *decimal.Decimal) *StockV1Update {
	if d != nil {
		sv.SetTotal(*d)
	}
	return sv
}

// ClearTotal clears the value of the "total" field.
func (sv *StockV1Update) ClearTotal() *StockV1Update {
	sv.mutation.ClearTotal()
	return sv
}

// SetLocked sets the "locked" field.
func (sv *StockV1Update) SetLocked(d decimal.Decimal) *StockV1Update {
	sv.mutation.SetLocked(d)
	return sv
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (sv *StockV1Update) SetNillableLocked(d *decimal.Decimal) *StockV1Update {
	if d != nil {
		sv.SetLocked(*d)
	}
	return sv
}

// ClearLocked clears the value of the "locked" field.
func (sv *StockV1Update) ClearLocked() *StockV1Update {
	sv.mutation.ClearLocked()
	return sv
}

// SetInService sets the "in_service" field.
func (sv *StockV1Update) SetInService(d decimal.Decimal) *StockV1Update {
	sv.mutation.SetInService(d)
	return sv
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (sv *StockV1Update) SetNillableInService(d *decimal.Decimal) *StockV1Update {
	if d != nil {
		sv.SetInService(*d)
	}
	return sv
}

// ClearInService clears the value of the "in_service" field.
func (sv *StockV1Update) ClearInService() *StockV1Update {
	sv.mutation.ClearInService()
	return sv
}

// SetWaitStart sets the "wait_start" field.
func (sv *StockV1Update) SetWaitStart(d decimal.Decimal) *StockV1Update {
	sv.mutation.SetWaitStart(d)
	return sv
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (sv *StockV1Update) SetNillableWaitStart(d *decimal.Decimal) *StockV1Update {
	if d != nil {
		sv.SetWaitStart(*d)
	}
	return sv
}

// ClearWaitStart clears the value of the "wait_start" field.
func (sv *StockV1Update) ClearWaitStart() *StockV1Update {
	sv.mutation.ClearWaitStart()
	return sv
}

// SetSold sets the "sold" field.
func (sv *StockV1Update) SetSold(d decimal.Decimal) *StockV1Update {
	sv.mutation.SetSold(d)
	return sv
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (sv *StockV1Update) SetNillableSold(d *decimal.Decimal) *StockV1Update {
	if d != nil {
		sv.SetSold(*d)
	}
	return sv
}

// ClearSold clears the value of the "sold" field.
func (sv *StockV1Update) ClearSold() *StockV1Update {
	sv.mutation.ClearSold()
	return sv
}

// Mutation returns the StockV1Mutation object of the builder.
func (sv *StockV1Update) Mutation() *StockV1Mutation {
	return sv.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sv *StockV1Update) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := sv.defaults(); err != nil {
		return 0, err
	}
	if len(sv.hooks) == 0 {
		affected, err = sv.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockV1Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sv.mutation = mutation
			affected, err = sv.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sv.hooks) - 1; i >= 0; i-- {
			if sv.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sv.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sv.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sv *StockV1Update) SaveX(ctx context.Context) int {
	affected, err := sv.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sv *StockV1Update) Exec(ctx context.Context) error {
	_, err := sv.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sv *StockV1Update) ExecX(ctx context.Context) {
	if err := sv.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sv *StockV1Update) defaults() error {
	if _, ok := sv.mutation.UpdatedAt(); !ok {
		if stockv1.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockv1.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stockv1.UpdateDefaultUpdatedAt()
		sv.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sv *StockV1Update) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockV1Update {
	sv.modifiers = append(sv.modifiers, modifiers...)
	return sv
}

func (sv *StockV1Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stockv1.Table,
			Columns: stockv1.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stockv1.FieldID,
			},
		},
	}
	if ps := sv.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sv.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldCreatedAt,
		})
	}
	if value, ok := sv.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldCreatedAt,
		})
	}
	if value, ok := sv.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldUpdatedAt,
		})
	}
	if value, ok := sv.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldUpdatedAt,
		})
	}
	if value, ok := sv.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldDeletedAt,
		})
	}
	if value, ok := sv.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldDeletedAt,
		})
	}
	if value, ok := sv.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stockv1.FieldGoodID,
		})
	}
	if value, ok := sv.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldTotal,
		})
	}
	if sv.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldTotal,
		})
	}
	if value, ok := sv.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldLocked,
		})
	}
	if sv.mutation.LockedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldLocked,
		})
	}
	if value, ok := sv.mutation.InService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldInService,
		})
	}
	if sv.mutation.InServiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldInService,
		})
	}
	if value, ok := sv.mutation.WaitStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldWaitStart,
		})
	}
	if sv.mutation.WaitStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldWaitStart,
		})
	}
	if value, ok := sv.mutation.Sold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldSold,
		})
	}
	if sv.mutation.SoldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldSold,
		})
	}
	_spec.Modifiers = sv.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, sv.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockv1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StockV1UpdateOne is the builder for updating a single StockV1 entity.
type StockV1UpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StockV1Mutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (svo *StockV1UpdateOne) SetCreatedAt(u uint32) *StockV1UpdateOne {
	svo.mutation.ResetCreatedAt()
	svo.mutation.SetCreatedAt(u)
	return svo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableCreatedAt(u *uint32) *StockV1UpdateOne {
	if u != nil {
		svo.SetCreatedAt(*u)
	}
	return svo
}

// AddCreatedAt adds u to the "created_at" field.
func (svo *StockV1UpdateOne) AddCreatedAt(u int32) *StockV1UpdateOne {
	svo.mutation.AddCreatedAt(u)
	return svo
}

// SetUpdatedAt sets the "updated_at" field.
func (svo *StockV1UpdateOne) SetUpdatedAt(u uint32) *StockV1UpdateOne {
	svo.mutation.ResetUpdatedAt()
	svo.mutation.SetUpdatedAt(u)
	return svo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (svo *StockV1UpdateOne) AddUpdatedAt(u int32) *StockV1UpdateOne {
	svo.mutation.AddUpdatedAt(u)
	return svo
}

// SetDeletedAt sets the "deleted_at" field.
func (svo *StockV1UpdateOne) SetDeletedAt(u uint32) *StockV1UpdateOne {
	svo.mutation.ResetDeletedAt()
	svo.mutation.SetDeletedAt(u)
	return svo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableDeletedAt(u *uint32) *StockV1UpdateOne {
	if u != nil {
		svo.SetDeletedAt(*u)
	}
	return svo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (svo *StockV1UpdateOne) AddDeletedAt(u int32) *StockV1UpdateOne {
	svo.mutation.AddDeletedAt(u)
	return svo
}

// SetGoodID sets the "good_id" field.
func (svo *StockV1UpdateOne) SetGoodID(u uuid.UUID) *StockV1UpdateOne {
	svo.mutation.SetGoodID(u)
	return svo
}

// SetTotal sets the "total" field.
func (svo *StockV1UpdateOne) SetTotal(d decimal.Decimal) *StockV1UpdateOne {
	svo.mutation.SetTotal(d)
	return svo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableTotal(d *decimal.Decimal) *StockV1UpdateOne {
	if d != nil {
		svo.SetTotal(*d)
	}
	return svo
}

// ClearTotal clears the value of the "total" field.
func (svo *StockV1UpdateOne) ClearTotal() *StockV1UpdateOne {
	svo.mutation.ClearTotal()
	return svo
}

// SetLocked sets the "locked" field.
func (svo *StockV1UpdateOne) SetLocked(d decimal.Decimal) *StockV1UpdateOne {
	svo.mutation.SetLocked(d)
	return svo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableLocked(d *decimal.Decimal) *StockV1UpdateOne {
	if d != nil {
		svo.SetLocked(*d)
	}
	return svo
}

// ClearLocked clears the value of the "locked" field.
func (svo *StockV1UpdateOne) ClearLocked() *StockV1UpdateOne {
	svo.mutation.ClearLocked()
	return svo
}

// SetInService sets the "in_service" field.
func (svo *StockV1UpdateOne) SetInService(d decimal.Decimal) *StockV1UpdateOne {
	svo.mutation.SetInService(d)
	return svo
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableInService(d *decimal.Decimal) *StockV1UpdateOne {
	if d != nil {
		svo.SetInService(*d)
	}
	return svo
}

// ClearInService clears the value of the "in_service" field.
func (svo *StockV1UpdateOne) ClearInService() *StockV1UpdateOne {
	svo.mutation.ClearInService()
	return svo
}

// SetWaitStart sets the "wait_start" field.
func (svo *StockV1UpdateOne) SetWaitStart(d decimal.Decimal) *StockV1UpdateOne {
	svo.mutation.SetWaitStart(d)
	return svo
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableWaitStart(d *decimal.Decimal) *StockV1UpdateOne {
	if d != nil {
		svo.SetWaitStart(*d)
	}
	return svo
}

// ClearWaitStart clears the value of the "wait_start" field.
func (svo *StockV1UpdateOne) ClearWaitStart() *StockV1UpdateOne {
	svo.mutation.ClearWaitStart()
	return svo
}

// SetSold sets the "sold" field.
func (svo *StockV1UpdateOne) SetSold(d decimal.Decimal) *StockV1UpdateOne {
	svo.mutation.SetSold(d)
	return svo
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (svo *StockV1UpdateOne) SetNillableSold(d *decimal.Decimal) *StockV1UpdateOne {
	if d != nil {
		svo.SetSold(*d)
	}
	return svo
}

// ClearSold clears the value of the "sold" field.
func (svo *StockV1UpdateOne) ClearSold() *StockV1UpdateOne {
	svo.mutation.ClearSold()
	return svo
}

// Mutation returns the StockV1Mutation object of the builder.
func (svo *StockV1UpdateOne) Mutation() *StockV1Mutation {
	return svo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svo *StockV1UpdateOne) Select(field string, fields ...string) *StockV1UpdateOne {
	svo.fields = append([]string{field}, fields...)
	return svo
}

// Save executes the query and returns the updated StockV1 entity.
func (svo *StockV1UpdateOne) Save(ctx context.Context) (*StockV1, error) {
	var (
		err  error
		node *StockV1
	)
	if err := svo.defaults(); err != nil {
		return nil, err
	}
	if len(svo.hooks) == 0 {
		node, err = svo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockV1Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svo.mutation = mutation
			node, err = svo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(svo.hooks) - 1; i >= 0; i-- {
			if svo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = svo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, svo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StockV1)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StockV1Mutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (svo *StockV1UpdateOne) SaveX(ctx context.Context) *StockV1 {
	node, err := svo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svo *StockV1UpdateOne) Exec(ctx context.Context) error {
	_, err := svo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svo *StockV1UpdateOne) ExecX(ctx context.Context) {
	if err := svo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svo *StockV1UpdateOne) defaults() error {
	if _, ok := svo.mutation.UpdatedAt(); !ok {
		if stockv1.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockv1.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stockv1.UpdateDefaultUpdatedAt()
		svo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (svo *StockV1UpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockV1UpdateOne {
	svo.modifiers = append(svo.modifiers, modifiers...)
	return svo
}

func (svo *StockV1UpdateOne) sqlSave(ctx context.Context) (_node *StockV1, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stockv1.Table,
			Columns: stockv1.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stockv1.FieldID,
			},
		},
	}
	id, ok := svo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StockV1.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stockv1.FieldID)
		for _, f := range fields {
			if !stockv1.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stockv1.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldCreatedAt,
		})
	}
	if value, ok := svo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldCreatedAt,
		})
	}
	if value, ok := svo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldUpdatedAt,
		})
	}
	if value, ok := svo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldUpdatedAt,
		})
	}
	if value, ok := svo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldDeletedAt,
		})
	}
	if value, ok := svo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldDeletedAt,
		})
	}
	if value, ok := svo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stockv1.FieldGoodID,
		})
	}
	if value, ok := svo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldTotal,
		})
	}
	if svo.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldTotal,
		})
	}
	if value, ok := svo.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldLocked,
		})
	}
	if svo.mutation.LockedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldLocked,
		})
	}
	if value, ok := svo.mutation.InService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldInService,
		})
	}
	if svo.mutation.InServiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldInService,
		})
	}
	if value, ok := svo.mutation.WaitStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldWaitStart,
		})
	}
	if svo.mutation.WaitStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldWaitStart,
		})
	}
	if value, ok := svo.mutation.Sold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldSold,
		})
	}
	if svo.mutation.SoldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stockv1.FieldSold,
		})
	}
	_spec.Modifiers = svo.modifiers
	_node = &StockV1{config: svo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockv1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
