// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-manager/pkg/db/ent/stockv1"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StockV1Create is the builder for creating a StockV1 entity.
type StockV1Create struct {
	config
	mutation *StockV1Mutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sv *StockV1Create) SetCreatedAt(u uint32) *StockV1Create {
	sv.mutation.SetCreatedAt(u)
	return sv
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sv *StockV1Create) SetNillableCreatedAt(u *uint32) *StockV1Create {
	if u != nil {
		sv.SetCreatedAt(*u)
	}
	return sv
}

// SetUpdatedAt sets the "updated_at" field.
func (sv *StockV1Create) SetUpdatedAt(u uint32) *StockV1Create {
	sv.mutation.SetUpdatedAt(u)
	return sv
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sv *StockV1Create) SetNillableUpdatedAt(u *uint32) *StockV1Create {
	if u != nil {
		sv.SetUpdatedAt(*u)
	}
	return sv
}

// SetDeletedAt sets the "deleted_at" field.
func (sv *StockV1Create) SetDeletedAt(u uint32) *StockV1Create {
	sv.mutation.SetDeletedAt(u)
	return sv
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sv *StockV1Create) SetNillableDeletedAt(u *uint32) *StockV1Create {
	if u != nil {
		sv.SetDeletedAt(*u)
	}
	return sv
}

// SetGoodID sets the "good_id" field.
func (sv *StockV1Create) SetGoodID(u uuid.UUID) *StockV1Create {
	sv.mutation.SetGoodID(u)
	return sv
}

// SetTotal sets the "total" field.
func (sv *StockV1Create) SetTotal(d decimal.Decimal) *StockV1Create {
	sv.mutation.SetTotal(d)
	return sv
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (sv *StockV1Create) SetNillableTotal(d *decimal.Decimal) *StockV1Create {
	if d != nil {
		sv.SetTotal(*d)
	}
	return sv
}

// SetLocked sets the "locked" field.
func (sv *StockV1Create) SetLocked(d decimal.Decimal) *StockV1Create {
	sv.mutation.SetLocked(d)
	return sv
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (sv *StockV1Create) SetNillableLocked(d *decimal.Decimal) *StockV1Create {
	if d != nil {
		sv.SetLocked(*d)
	}
	return sv
}

// SetInService sets the "in_service" field.
func (sv *StockV1Create) SetInService(d decimal.Decimal) *StockV1Create {
	sv.mutation.SetInService(d)
	return sv
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (sv *StockV1Create) SetNillableInService(d *decimal.Decimal) *StockV1Create {
	if d != nil {
		sv.SetInService(*d)
	}
	return sv
}

// SetWaitStart sets the "wait_start" field.
func (sv *StockV1Create) SetWaitStart(d decimal.Decimal) *StockV1Create {
	sv.mutation.SetWaitStart(d)
	return sv
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (sv *StockV1Create) SetNillableWaitStart(d *decimal.Decimal) *StockV1Create {
	if d != nil {
		sv.SetWaitStart(*d)
	}
	return sv
}

// SetSold sets the "sold" field.
func (sv *StockV1Create) SetSold(d decimal.Decimal) *StockV1Create {
	sv.mutation.SetSold(d)
	return sv
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (sv *StockV1Create) SetNillableSold(d *decimal.Decimal) *StockV1Create {
	if d != nil {
		sv.SetSold(*d)
	}
	return sv
}

// SetID sets the "id" field.
func (sv *StockV1Create) SetID(u uuid.UUID) *StockV1Create {
	sv.mutation.SetID(u)
	return sv
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sv *StockV1Create) SetNillableID(u *uuid.UUID) *StockV1Create {
	if u != nil {
		sv.SetID(*u)
	}
	return sv
}

// Mutation returns the StockV1Mutation object of the builder.
func (sv *StockV1Create) Mutation() *StockV1Mutation {
	return sv.mutation
}

// Save creates the StockV1 in the database.
func (sv *StockV1Create) Save(ctx context.Context) (*StockV1, error) {
	var (
		err  error
		node *StockV1
	)
	if err := sv.defaults(); err != nil {
		return nil, err
	}
	if len(sv.hooks) == 0 {
		if err = sv.check(); err != nil {
			return nil, err
		}
		node, err = sv.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockV1Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sv.check(); err != nil {
				return nil, err
			}
			sv.mutation = mutation
			if node, err = sv.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sv.hooks) - 1; i >= 0; i-- {
			if sv.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sv.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sv.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StockV1)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StockV1Mutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sv *StockV1Create) SaveX(ctx context.Context) *StockV1 {
	v, err := sv.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sv *StockV1Create) Exec(ctx context.Context) error {
	_, err := sv.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sv *StockV1Create) ExecX(ctx context.Context) {
	if err := sv.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sv *StockV1Create) defaults() error {
	if _, ok := sv.mutation.CreatedAt(); !ok {
		if stockv1.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockv1.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := stockv1.DefaultCreatedAt()
		sv.mutation.SetCreatedAt(v)
	}
	if _, ok := sv.mutation.UpdatedAt(); !ok {
		if stockv1.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockv1.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stockv1.DefaultUpdatedAt()
		sv.mutation.SetUpdatedAt(v)
	}
	if _, ok := sv.mutation.DeletedAt(); !ok {
		if stockv1.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized stockv1.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := stockv1.DefaultDeletedAt()
		sv.mutation.SetDeletedAt(v)
	}
	if _, ok := sv.mutation.Total(); !ok {
		v := stockv1.DefaultTotal
		sv.mutation.SetTotal(v)
	}
	if _, ok := sv.mutation.Locked(); !ok {
		v := stockv1.DefaultLocked
		sv.mutation.SetLocked(v)
	}
	if _, ok := sv.mutation.InService(); !ok {
		v := stockv1.DefaultInService
		sv.mutation.SetInService(v)
	}
	if _, ok := sv.mutation.WaitStart(); !ok {
		v := stockv1.DefaultWaitStart
		sv.mutation.SetWaitStart(v)
	}
	if _, ok := sv.mutation.Sold(); !ok {
		v := stockv1.DefaultSold
		sv.mutation.SetSold(v)
	}
	if _, ok := sv.mutation.ID(); !ok {
		if stockv1.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized stockv1.DefaultID (forgotten import ent/runtime?)")
		}
		v := stockv1.DefaultID()
		sv.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sv *StockV1Create) check() error {
	if _, ok := sv.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StockV1.created_at"`)}
	}
	if _, ok := sv.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StockV1.updated_at"`)}
	}
	if _, ok := sv.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "StockV1.deleted_at"`)}
	}
	if _, ok := sv.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "StockV1.good_id"`)}
	}
	return nil
}

func (sv *StockV1Create) sqlSave(ctx context.Context) (*StockV1, error) {
	_node, _spec := sv.createSpec()
	if err := sqlgraph.CreateNode(ctx, sv.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sv *StockV1Create) createSpec() (*StockV1, *sqlgraph.CreateSpec) {
	var (
		_node = &StockV1{config: sv.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stockv1.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stockv1.FieldID,
			},
		}
	)
	_spec.OnConflict = sv.conflict
	if id, ok := sv.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sv.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sv.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sv.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stockv1.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := sv.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stockv1.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := sv.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldTotal,
		})
		_node.Total = value
	}
	if value, ok := sv.mutation.Locked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldLocked,
		})
		_node.Locked = value
	}
	if value, ok := sv.mutation.InService(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldInService,
		})
		_node.InService = value
	}
	if value, ok := sv.mutation.WaitStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldWaitStart,
		})
		_node.WaitStart = value
	}
	if value, ok := sv.mutation.Sold(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stockv1.FieldSold,
		})
		_node.Sold = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StockV1.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StockV1Upsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sv *StockV1Create) OnConflict(opts ...sql.ConflictOption) *StockV1UpsertOne {
	sv.conflict = opts
	return &StockV1UpsertOne{
		create: sv,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StockV1.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sv *StockV1Create) OnConflictColumns(columns ...string) *StockV1UpsertOne {
	sv.conflict = append(sv.conflict, sql.ConflictColumns(columns...))
	return &StockV1UpsertOne{
		create: sv,
	}
}

type (
	// StockV1UpsertOne is the builder for "upsert"-ing
	//  one StockV1 node.
	StockV1UpsertOne struct {
		create *StockV1Create
	}

	// StockV1Upsert is the "OnConflict" setter.
	StockV1Upsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StockV1Upsert) SetCreatedAt(v uint32) *StockV1Upsert {
	u.Set(stockv1.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateCreatedAt() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StockV1Upsert) AddCreatedAt(v uint32) *StockV1Upsert {
	u.Add(stockv1.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StockV1Upsert) SetUpdatedAt(v uint32) *StockV1Upsert {
	u.Set(stockv1.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateUpdatedAt() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StockV1Upsert) AddUpdatedAt(v uint32) *StockV1Upsert {
	u.Add(stockv1.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StockV1Upsert) SetDeletedAt(v uint32) *StockV1Upsert {
	u.Set(stockv1.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateDeletedAt() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StockV1Upsert) AddDeletedAt(v uint32) *StockV1Upsert {
	u.Add(stockv1.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *StockV1Upsert) SetGoodID(v uuid.UUID) *StockV1Upsert {
	u.Set(stockv1.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateGoodID() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldGoodID)
	return u
}

// SetTotal sets the "total" field.
func (u *StockV1Upsert) SetTotal(v decimal.Decimal) *StockV1Upsert {
	u.Set(stockv1.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateTotal() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldTotal)
	return u
}

// ClearTotal clears the value of the "total" field.
func (u *StockV1Upsert) ClearTotal() *StockV1Upsert {
	u.SetNull(stockv1.FieldTotal)
	return u
}

// SetLocked sets the "locked" field.
func (u *StockV1Upsert) SetLocked(v decimal.Decimal) *StockV1Upsert {
	u.Set(stockv1.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateLocked() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldLocked)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *StockV1Upsert) ClearLocked() *StockV1Upsert {
	u.SetNull(stockv1.FieldLocked)
	return u
}

// SetInService sets the "in_service" field.
func (u *StockV1Upsert) SetInService(v decimal.Decimal) *StockV1Upsert {
	u.Set(stockv1.FieldInService, v)
	return u
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateInService() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldInService)
	return u
}

// ClearInService clears the value of the "in_service" field.
func (u *StockV1Upsert) ClearInService() *StockV1Upsert {
	u.SetNull(stockv1.FieldInService)
	return u
}

// SetWaitStart sets the "wait_start" field.
func (u *StockV1Upsert) SetWaitStart(v decimal.Decimal) *StockV1Upsert {
	u.Set(stockv1.FieldWaitStart, v)
	return u
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateWaitStart() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldWaitStart)
	return u
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *StockV1Upsert) ClearWaitStart() *StockV1Upsert {
	u.SetNull(stockv1.FieldWaitStart)
	return u
}

// SetSold sets the "sold" field.
func (u *StockV1Upsert) SetSold(v decimal.Decimal) *StockV1Upsert {
	u.Set(stockv1.FieldSold, v)
	return u
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *StockV1Upsert) UpdateSold() *StockV1Upsert {
	u.SetExcluded(stockv1.FieldSold)
	return u
}

// ClearSold clears the value of the "sold" field.
func (u *StockV1Upsert) ClearSold() *StockV1Upsert {
	u.SetNull(stockv1.FieldSold)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.StockV1.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stockv1.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StockV1UpsertOne) UpdateNewValues() *StockV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(stockv1.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.StockV1.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StockV1UpsertOne) Ignore() *StockV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StockV1UpsertOne) DoNothing() *StockV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StockV1Create.OnConflict
// documentation for more info.
func (u *StockV1UpsertOne) Update(set func(*StockV1Upsert)) *StockV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StockV1Upsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StockV1UpsertOne) SetCreatedAt(v uint32) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StockV1UpsertOne) AddCreatedAt(v uint32) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateCreatedAt() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StockV1UpsertOne) SetUpdatedAt(v uint32) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StockV1UpsertOne) AddUpdatedAt(v uint32) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateUpdatedAt() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StockV1UpsertOne) SetDeletedAt(v uint32) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StockV1UpsertOne) AddDeletedAt(v uint32) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateDeletedAt() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *StockV1UpsertOne) SetGoodID(v uuid.UUID) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateGoodID() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateGoodID()
	})
}

// SetTotal sets the "total" field.
func (u *StockV1UpsertOne) SetTotal(v decimal.Decimal) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateTotal() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateTotal()
	})
}

// ClearTotal clears the value of the "total" field.
func (u *StockV1UpsertOne) ClearTotal() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearTotal()
	})
}

// SetLocked sets the "locked" field.
func (u *StockV1UpsertOne) SetLocked(v decimal.Decimal) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateLocked() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *StockV1UpsertOne) ClearLocked() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *StockV1UpsertOne) SetInService(v decimal.Decimal) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateInService() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *StockV1UpsertOne) ClearInService() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *StockV1UpsertOne) SetWaitStart(v decimal.Decimal) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateWaitStart() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *StockV1UpsertOne) ClearWaitStart() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *StockV1UpsertOne) SetSold(v decimal.Decimal) *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *StockV1UpsertOne) UpdateSold() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *StockV1UpsertOne) ClearSold() *StockV1UpsertOne {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearSold()
	})
}

// Exec executes the query.
func (u *StockV1UpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StockV1Create.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StockV1UpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StockV1UpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: StockV1UpsertOne.ID is not supported by MySQL driver. Use StockV1UpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StockV1UpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StockV1CreateBulk is the builder for creating many StockV1 entities in bulk.
type StockV1CreateBulk struct {
	config
	builders []*StockV1Create
	conflict []sql.ConflictOption
}

// Save creates the StockV1 entities in the database.
func (svb *StockV1CreateBulk) Save(ctx context.Context) ([]*StockV1, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svb.builders))
	nodes := make([]*StockV1, len(svb.builders))
	mutators := make([]Mutator, len(svb.builders))
	for i := range svb.builders {
		func(i int, root context.Context) {
			builder := svb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StockV1Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = svb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svb *StockV1CreateBulk) SaveX(ctx context.Context) []*StockV1 {
	v, err := svb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svb *StockV1CreateBulk) Exec(ctx context.Context) error {
	_, err := svb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svb *StockV1CreateBulk) ExecX(ctx context.Context) {
	if err := svb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StockV1.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StockV1Upsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (svb *StockV1CreateBulk) OnConflict(opts ...sql.ConflictOption) *StockV1UpsertBulk {
	svb.conflict = opts
	return &StockV1UpsertBulk{
		create: svb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StockV1.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (svb *StockV1CreateBulk) OnConflictColumns(columns ...string) *StockV1UpsertBulk {
	svb.conflict = append(svb.conflict, sql.ConflictColumns(columns...))
	return &StockV1UpsertBulk{
		create: svb,
	}
}

// StockV1UpsertBulk is the builder for "upsert"-ing
// a bulk of StockV1 nodes.
type StockV1UpsertBulk struct {
	create *StockV1CreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StockV1.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stockv1.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StockV1UpsertBulk) UpdateNewValues() *StockV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(stockv1.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StockV1.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StockV1UpsertBulk) Ignore() *StockV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StockV1UpsertBulk) DoNothing() *StockV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StockV1CreateBulk.OnConflict
// documentation for more info.
func (u *StockV1UpsertBulk) Update(set func(*StockV1Upsert)) *StockV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StockV1Upsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StockV1UpsertBulk) SetCreatedAt(v uint32) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StockV1UpsertBulk) AddCreatedAt(v uint32) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateCreatedAt() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StockV1UpsertBulk) SetUpdatedAt(v uint32) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StockV1UpsertBulk) AddUpdatedAt(v uint32) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateUpdatedAt() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StockV1UpsertBulk) SetDeletedAt(v uint32) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StockV1UpsertBulk) AddDeletedAt(v uint32) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateDeletedAt() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *StockV1UpsertBulk) SetGoodID(v uuid.UUID) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateGoodID() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateGoodID()
	})
}

// SetTotal sets the "total" field.
func (u *StockV1UpsertBulk) SetTotal(v decimal.Decimal) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateTotal() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateTotal()
	})
}

// ClearTotal clears the value of the "total" field.
func (u *StockV1UpsertBulk) ClearTotal() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearTotal()
	})
}

// SetLocked sets the "locked" field.
func (u *StockV1UpsertBulk) SetLocked(v decimal.Decimal) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateLocked() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *StockV1UpsertBulk) ClearLocked() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *StockV1UpsertBulk) SetInService(v decimal.Decimal) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateInService() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *StockV1UpsertBulk) ClearInService() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *StockV1UpsertBulk) SetWaitStart(v decimal.Decimal) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateWaitStart() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *StockV1UpsertBulk) ClearWaitStart() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *StockV1UpsertBulk) SetSold(v decimal.Decimal) *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *StockV1UpsertBulk) UpdateSold() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *StockV1UpsertBulk) ClearSold() *StockV1UpsertBulk {
	return u.Update(func(s *StockV1Upsert) {
		s.ClearSold()
	})
}

// Exec executes the query.
func (u *StockV1UpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StockV1CreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StockV1CreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StockV1UpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
